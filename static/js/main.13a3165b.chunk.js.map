{"version":3,"sources":["components/Label/index.js","components/ProgressBar/index.js","components/TextInput/index.js","docs/examples/EyeIcon/ExampleEyeIcon.js","components/EyeIcon/index.js","docs/examples/HelloWorld/ExampleHelloWorld.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","components/PasswordInput/index.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples/TextInputCSSModules/ExampleError.js","docs/examples/TextInputStyledComponents/ExampleError.js","index.js","docs/Docs.js","docs/Navigation.js","docs/ComponentPage.js","docs/Example.js","docs/CodeExample.js","docs/examples sync /^/.//.*$","components/EyeIcon/EyeIcon.js","components/HelloWorld/index.js","components/HelloWorld/HelloWorld.js","components/Label/Label.js","components/PasswordInput/PasswordInput.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/RegistrationForm/index.js","components/RegistrationForm/RegistrationForm.js","components/TextInputBEM/index.js","components/TextInputBEM/TextInputBEM.js","components/TextInputCSSModules/index.js","components/TextInputCSSModules/TextInputCSSModules.js","components/TextInputStyledComponents/index.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/Props.js","../config/componentData.js","serviceWorker.js"],"names":["_Label","__webpack_require__","_ProgressBar","_TextInput","_react","default","createElement","_EyeIcon","_interopRequireDefault","_HelloWorld","message","htmlFor","label","required","_PasswordInput","ExampleAllFeatures","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","password","React","Component","length","_this2","Object","assign","htmlId","name","onChange","event","setState","target","value","minLength","placeholder","showVisibilityToggle","quality","getQuality","percent","width","height","_RegistrationForm","ExampleRegistrationForm","onSubmit","user","console","log","ExampleError","error","ExampleOptional","_TextInputBEM","_TextInputCSSModules","_TextInputStyledComponents","_reactDom","_Docs","serviceWorker","_interopRequireWildcard","ReactDOM","render","document","getElementById","unregister","_Navigation","_ComponentPage","_componentData","Docs","route","window","location","hash","substr","addEventListener","component","componentData","filter","components","map","_ref","className","key","href","concat","_Example","_Props","description","examples","example","componentName","_CodeExample","Example","toggleCode","preventDefault","prevState","showCode","_this$props$example","code","ExampleComponent","require","onClick","_highlight","_javascript","hljs","registerLanguage","javascript","highlightBlock","element","ref","children","./EyeIcon/ExampleEyeIcon","./EyeIcon/ExampleEyeIcon.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","webpackContext","req","id","webpackContextResolve","o","e","Error","keys","resolve","module","exports","xmlns","viewBox","transform","fill","d","cx","cy","r","HelloWorld","defaultProps","style","display","color","PasswordInput","toggleShowPassword","showPassword","_this$props","maxLength","_objectWithoutProperties","type","marginLeft","ProgressBar","getColor","getWidthAsPercentOfTotalWidth","parseInt","border","backgroundColor","_ref$type","_ref$required","marginBottom","RegistrationForm","validate","submitted","email","errors","minPasswordLength","getOwnPropertyNames","_this$state","_this$state$user","confirmationMessage","passwordQuality","_textInput","styles","fieldset","inputError","_styledComponents","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","defaultValue","computed","config","navigator","publicUrl","URL","process","origin","swUrl","isLocalhost","fetch","then","response","contentType","headers","get","status","indexOf","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"4NAAA,MAAAA,KAAAC,EAAA,oMCAA,MAAAC,KAAAD,EAAA,oMCAA,MAAAE,KAAAF,EAAA,2HCGe,WACb,OAAOG,EAAAC,QAAAC,cAACC,EAAAF,QAAD,OAJT,IAAAD,EAAAI,EAAAP,EAAA,IACAM,EAAAC,EAAAP,EAAA,2NCDA,MAAAM,KAAAN,EAAA,0HCIe,WACb,OAAOG,EAAAC,QAAAC,cAACG,EAAAJ,QAAD,CAAYK,QAAU,yBAL/B,IAAAN,EAAAI,EAAAP,EAAA,IACAQ,EAAAD,EAAAP,EAAA,kJCGe,WACb,OAAOG,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAAQ,OAAOC,MAAM,UALrC,IAAAR,EAAAI,EAAAP,EAAA,IACAD,EAAAQ,EAAAP,EAAA,iJCGe,WACb,OAAOG,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAAQ,OAAOC,MAAM,OAAOC,UAAQ,KALpD,IAAAT,EAAAI,EAAAP,EAAA,IACAD,EAAAQ,EAAAP,EAAA,wJCDA,IAAAG,EAAAI,EAAAP,EAAA,IACAa,EAAAN,EAAAP,EAAA,q3BAIE,SAAAc,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KAEDO,MAAQ,CACXC,SAAU,IAJKP,yPADYQ,UAAMC,sDAUnC,IAAMC,EAASR,KAAKI,MAAMC,SAASG,OACnC,OAAOA,EAAS,GAAK,IAAe,GAATA,mCAGpB,IAAAC,EAAAT,KACP,OACEf,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAACQ,EAAAT,QAADwB,OAAAC,OAAA,CACEC,OAAO,sCACPC,KAAK,WACLC,SAAW,SAAAC,GAAK,OAAIN,EAAKO,SAAS,CAAEX,SAAUU,EAAME,OAAOC,SAC3DA,MAAOlB,KAAKI,MAAMC,SAClBc,UAAW,EACXC,YAAY,iBACZC,sBAAoB,EACpBC,QAAStB,KAAKuB,cACVvB,KAAKH,6NC9BnB,MAAAF,KAAAb,EAAA,0HCIe,WACb,OAAOG,EAAAC,QAAAC,cAACJ,EAAAG,QAAD,CAAasC,QAAS,IAAKC,MAAO,IAAKC,OAAQ,MALxD,IAAAzC,EAAAI,EAAAP,EAAA,IACAC,EAAAM,EAAAP,EAAA,iJCGe,WACb,OAAOG,EAAAC,QAAAC,cAACJ,EAAAG,QAAD,CAAasC,QAAS,GAAIC,MAAO,OAL1C,IAAAxC,EAAAI,EAAAP,EAAA,IACAC,EAAAM,EAAAP,EAAA,iJCGe,WACb,OAAOG,EAAAC,QAAAC,cAACJ,EAAAG,QAAD,CAAasC,QAAS,GAAIC,MAAO,OAL1C,IAAAxC,EAAAI,EAAAP,EAAA,IACAC,EAAAM,EAAAP,EAAA,wJCDA,IAAAG,EAAAI,EAAAP,EAAA,IACA6C,EAAAtC,EAAAP,EAAA,u2BAEqB8C,2QACnBC,SAAW,SAACC,GACVC,QAAQC,IAAIF,6PAFqCxB,UAAMC,kDAMvD,OAAOtB,EAAAC,QAAAC,cAACwC,EAAAzC,QAAD,CAAkB2C,SAAU7B,KAAK6B,4JCT5C,IAAA5C,EAAAI,EAAAP,EAAA,IACAE,EAAAK,EAAAP,EAAA,s2BAGqBmD,iaAAqB3B,UAAMC,kDAE5C,OACEtB,EAAAC,QAAAC,cAACH,EAAAE,QAAD,CACE0B,OAAO,mBACPnB,MAAM,aACNoB,KAAK,YACLC,SAAU,aACVM,YAAY,aACZ1B,UAAQ,EACRwC,MAAM,6KCdd,IAAAjD,EAAAI,EAAAP,EAAA,IACAE,EAAAK,EAAAP,EAAA,s2BAGqBqD,iaAAwB7B,UAAMC,kDAE/C,OACEtB,EAAAC,QAAAC,cAACH,EAAAE,QAAD,CACE0B,OAAO,mBACPnB,MAAM,aACNoB,KAAK,YACLC,SAAU,aACVM,YAAY,gKCZpB,IAAAnC,EAAAI,EAAAP,EAAA,IACAsD,EAAA/C,EAAAP,EAAA,u2BAGqBmD,iaAAqB3B,UAAMC,kDAE5C,OACEtB,EAAAC,QAAAC,cAACiD,EAAAlD,QAAD,CACE0B,OAAO,mBACPnB,MAAM,aACNoB,KAAK,YACLC,SAAU,aACVpB,UAAQ,EACRwC,MAAM,6KCbd,IAAAjD,EAAAI,EAAAP,EAAA,IACAuD,EAAAhD,EAAAP,EAAA,u2BAGqBmD,iaAAqB3B,UAAMC,kDAE5C,OACEtB,EAAAC,QAAAC,cAACkD,EAAAnD,QAAD,CACE0B,OAAO,mBACPnB,MAAM,aACNoB,KAAK,YACLC,SAAU,aACVpB,UAAQ,EACRwC,MAAM,6KCbd,IAAAjD,EAAAI,EAAAP,EAAA,IACAwD,EAAAjD,EAAAP,EAAA,u2BAGqBmD,iaAAqB3B,UAAMC,kDAE5C,OACEtB,EAAAC,QAAAC,cAACmD,EAAApD,QAAD,CACE0B,OAAO,mBACPnB,MAAM,aACNoB,KAAK,YACLC,SAAU,aACVpB,UAAQ,EACRwC,MAAM,4ICbd,IAAAjD,EAAAI,EAAAP,EAAA,IACAyD,EAAAlD,EAAAP,EAAA,KACA0D,EAAAnD,EAAAP,EAAA,KACAA,EAAA,IACAA,EAAA,IACA,IAAA2D,ySAAAC,CAAA5D,EAAA,wDAEA6D,UAASC,OACP3D,EAAAC,QAAAC,cAACqD,EAAAtD,QAAD,MACA2D,SAASC,eAAe,SAG1BL,EAAcM,mHCZd,IAAA9D,EAAAI,EAAAP,EAAA,IACAkE,EAAA3D,EAAAP,EAAA,KACAmE,EAAA5D,EAAAP,EAAA,KACAoE,EAAA7D,EAAAP,EAAA,u2BAEqBqE,cACnB,SAAAA,EAAYtD,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAmD,IACjBrD,EAAAG,EAAAD,KAAAE,EAAAiD,GAAAhD,KAAAH,KAAMH,KACDO,MAAQ,CACXgD,MAAOC,OAAOC,SAASC,KAAKC,OAAO,IAHpB1D,yPADaQ,UAAMC,6DAQlB,IAAAE,EAAAT,KAClBqD,OAAOI,iBAAiB,aAAc,WACpChD,EAAKO,SAAS,CAACoC,MAAOC,OAAOC,SAASC,KAAKC,OAAO,wCAI7C,IACAJ,EAASpD,KAAKI,MAAdgD,MACDM,EAAYN,EAAQO,UAAcC,OAAQ,SAAAF,GAAS,OAAIA,EAAU7C,OAASuC,IAAO,GAAKO,UAAc,GAE1G,OACE1E,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAAC6D,EAAA9D,QAAD,CAAY2E,WAAYF,UAAcG,IAAI,SAAAJ,GAAS,OAAIA,EAAU7C,SACjE5B,EAAAC,QAAAC,cAAC8D,EAAA/D,QAAD,CAAewE,UAAWA,sJC1BlC,MAAAzE,KAAAH,EAAA,gCAGA,MAAmB,SAAAiF,GAAkB,IAAhBF,EAAgBE,EAAhBF,WACnB,OACE5E,EAAAC,QAAAC,cAAA,MAAI6E,UAAU,cAEVH,EAAWC,IAAK,SAAAjD,GACd,OACE5B,EAAAC,QAAAC,cAAA,MAAI8E,IAAKpD,GACP5B,EAAAC,QAAAC,cAAA,KAAG+E,KAAI,IAAAC,OAAMtD,IAASA,oHCVpC,IAAA5B,EAAAI,EAAAP,EAAA,IAEAsF,EAAA/E,EAAAP,EAAA,KACAuF,EAAAhF,EAAAP,EAAA,wDAEA,MAAsB,SAAAiF,GAAiB,IAAfL,EAAeK,EAAfL,UACf7C,EAAsC6C,EAAtC7C,KAAMyD,EAAgCZ,EAAhCY,YAAazE,EAAmB6D,EAAnB7D,MAAO0E,EAAYb,EAAZa,SAEjC,OACEtF,EAAAC,QAAAC,cAAA,OAAK6E,UAAU,iBACb/E,EAAAC,QAAAC,cAAA,UAAK0B,GACL5B,EAAAC,QAAAC,cAAA,SAAImF,GAEJrF,EAAAC,QAAAC,cAAA,oBAAYoF,EAAS/D,OAAS,GAAK,KAEjC+D,EAAS/D,OAAS,EAClB+D,EAAST,IAAK,SAAAU,GAAO,OAAIvF,EAAAC,QAAAC,cAACiF,EAAAlF,QAAD,CAAS+E,IAAKO,EAAQ3D,KAAM2D,QAASA,EAASC,cAAe5D,MACtF,qBAGF5B,EAAAC,QAAAC,cAAA,mBAEEU,EACAZ,EAAAC,QAAAC,cAACkF,EAAAnF,QAAD,CAAOW,MAAOA,IACd,iJCxBR,IAAAZ,EAAAI,EAAAP,EAAA,IAEA4F,EAAArF,EAAAP,EAAA,q3BAGE,SAAA6F,EAAY9E,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAA2E,IACjB7E,EAAAG,EAAAD,KAAAE,EAAAyE,GAAAxE,KAAAH,KAAMH,KAIR+E,WAAa,SAAA7D,GACXA,EAAM8D,iBACN/E,EAAKkB,SAAS,SAAA8D,GACZ,MAAO,CAACC,UAAWD,EAAUC,aAN/BjF,EAAKM,MAAQ,CAAE2E,UAAU,GAFRjF,yPADCQ,UAAMC,kDAajB,IACAwE,EAAY/E,KAAKI,MAAjB2E,SADAC,EAE2BhF,KAAKH,MAAM2E,QAAtCS,EAFAD,EAEAC,KAAMX,EAFNU,EAEMV,YAAazD,EAFnBmE,EAEmBnE,KAEpBqE,EAAmBC,MAAQ,KAAAhB,OAAcnE,KAAKH,MAAM4E,cAA1B,KAAAN,OAA2CtD,IAAQ3B,QACnF,OACED,EAAAC,QAAAC,cAAA,OAAK6E,UAAU,WACZM,GAAerF,EAAAC,QAAAC,cAAA,UAAKmF,GAErBrF,EAAAC,QAAAC,cAAC+F,EAAD,MAEAjG,EAAAC,QAAAC,cAAA,SACEF,EAAAC,QAAAC,cAAA,KAAG+E,KAAK,MAAMkB,QAASpF,KAAK4E,YACzBG,EAAW,OAAS,OADvB,UAKDA,GAAY9F,EAAAC,QAAAC,cAACuF,EAAAxF,QAAD,KAAc+F,qJClCnC,IAAAhG,EAAAI,EAAAP,EAAA,IAEAuG,EAAAhG,EAAAP,EAAA,KACAwG,EAAAjG,EAAAP,EAAA,wwCAK0BwB,UAAMC,6DAE5BgF,UAAKC,iBAAiB,aAAcC,WACpCF,UAAKG,eAAe1F,KAAK2F,0CAGlB,IAAA7F,EAAAE,KACP,OACEf,EAAAC,QAAAC,cAAA,OAAKyG,IAAK,SAAAA,GAAS9F,EAAK6F,QAAUC,IAChC3G,EAAAC,QAAAC,cAAA,YACGa,KAAKH,MAAMgG,+EClBtB,IAAA/B,EAAA,CACAgC,2BAAA,EACAC,8BAAA,EACAC,iCAAA,EACAC,oCAAA,EACAC,0BAAA,EACAC,6BAAA,EACAC,0BAAA,EACAC,6BAAA,EACAC,qCAAA,GACAC,wCAAA,GACAC,kCAAA,GACAC,qCAAA,GACAC,iCAAA,GACAC,oCAAA,GACAC,iCAAA,GACAC,oCAAA,GACAC,6CAAA,GACAC,gDAAA,GACAC,2BAAA,GACAC,8BAAA,GACAC,8BAAA,GACAC,iCAAA,GACAC,8BAAA,GACAC,iCAAA,GACAC,qCAAA,GACAC,wCAAA,GACAC,2CAAA,GACAC,8CAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAA7I,EAAA8I,GAEA,SAAAC,EAAAF,GACA,IAAA7I,EAAAgJ,EAAAhE,EAAA6D,GAAA,CACA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAA9C,KAAA,mBACA8C,EAEA,OAAAjE,EAAA6D,GAEAD,EAAAO,KAAA,WACA,OAAAvH,OAAAuH,KAAAnE,IAEA4D,EAAAQ,QAAAL,EACAM,EAAAC,QAAAV,EACAA,EAAAE,GAAA,mGCjDA,MAAA3I,KAAAH,EAAA,sCAGA,WAEE,OACEG,EAAAC,QAAAC,cAAA,OAAKsC,MAAM,KAAKC,OAAO,KAAK2G,MAAM,6BAA6BC,QAAQ,aACrErJ,EAAAC,QAAAC,cAAA,KAAGoJ,UAAU,gCAAgCC,KAAK,WAChDvJ,EAAAC,QAAAC,cAAA,QAAMsJ,EAAE,6UACRxJ,EAAAC,QAAAC,cAAA,UAAQuJ,GAAG,SAASC,GAAG,SAASC,EAAE,4LCT1C,MAAAtJ,KAAAR,EAAA,iICAA,MAAAG,KAAAH,EAAA,gCAIA,SAAS+J,EAAT9E,GAA+B,IAAVxE,EAAUwE,EAAVxE,QACnB,OAAON,EAAAC,QAAAC,cAAA,oBAAYI,GAQrBsJ,EAAWC,aAAe,CACxBvJ,QAAS,eAGIsJ,8GCjBf,MAAA5J,KAAAH,EAAA,sCAIA,SAAAiF,GAA2C,IAA3BvE,EAA2BuE,EAA3BvE,QAASC,EAAkBsE,EAAlBtE,MAAOC,EAAWqE,EAAXrE,SAC9B,OACET,EAAAC,QAAAC,cAAA,SAAO4J,MAAO,CAACC,QAAS,SAAUxJ,QAASA,GACxCC,EADH,IACYC,GAAYT,EAAAC,QAAAC,cAAA,QAAM4J,MAAO,CAACE,MAAO,QAArB,oHCP5B,IAAAhK,EAAAI,EAAAP,EAAA,IAEAC,EAAAM,EAAAP,EAAA,IACAM,EAAAC,EAAAP,EAAA,IACAE,EAAAK,EAAAP,EAAA,0tCAGMoK,cACJ,SAAAA,EAAYrJ,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAkJ,IACjBpJ,EAAAG,EAAAD,KAAAE,EAAAgJ,GAAA/I,KAAAH,KAAMH,KAMRsJ,mBAAqB,SAAApI,GACnBjB,EAAKkB,SAAS,SAAA8D,GACZ,MAAO,CAAEsE,cAAetE,EAAUsE,gBAEhCrI,GAAOA,EAAM8D,kBATjB/E,EAAKM,MAAQ,CACXgJ,cAAc,GAHCtJ,yPADOQ,UAAMC,kDAevB,IAAA8I,EAC4GrJ,KAAKH,MAAhHe,EADDyI,EACCzI,OAAQM,EADTmI,EACSnI,MAAOzB,EADhB4J,EACgB5J,MAAOyC,EADvBmH,EACuBnH,MAAOpB,EAD9BuI,EAC8BvI,SAAUM,EADxCiI,EACwCjI,YAAakI,EADrDD,EACqDC,UAAWjI,EADhEgI,EACgEhI,qBAAsBC,EADtF+H,EACsF/H,QAAYzB,EADlG0J,EAAAF,EAAA,0GAECD,EAAiBpJ,KAAKI,MAAtBgJ,aAER,OACEnK,EAAAC,QAAAC,cAACH,EAAAE,QAADwB,OAAAC,OAAA,CACEC,OAAQA,EACRnB,MAAOA,EACP2B,YAAaA,EACboI,KAAMJ,EAAe,OAAS,WAC9BtI,SAAUA,EACVI,MAAOA,EACPoI,UAAWA,EACXpH,MAAOA,EACPxC,UAAQ,GACJG,GAEFwB,GACApC,EAAAC,QAAAC,cAAA,KACE+E,KAAK,MACLkB,QAASpF,KAAKmJ,mBACdJ,MAAO,CAAEU,WAAY,IACrBxK,EAAAC,QAAAC,cAACC,EAAAF,QAAD,OAIFgC,EAAMV,OAAS,GAAKc,GAAWrC,EAAAC,QAAAC,cAACJ,EAAAG,QAAD,CAAasC,QAASF,EAASG,MAAO,4CAuC/EyH,EAAcJ,aAAe,CAC3BQ,UAAW,GACXjI,sBAAsB,EACtB5B,MAAO,kBAGMyJ,8GC7Ff,MAAAjK,KAAAH,EAAA,+0BAGM4K,2QACJC,SAAW,SAACnI,GACV,OAA2B,MAAvB1B,EAAKD,MAAM2B,QAAwB,QAChC1B,EAAKD,MAAM2B,QAAU,GAAK,aAAe,SAGlDoI,8BAAgC,WAC9B,OAAOC,SAAS/J,EAAKD,MAAM4B,OAAS3B,EAAKD,MAAM2B,QAAU,KAAM,8PAPzClB,UAAMC,kDAUrB,IAAA8I,EAC0BrJ,KAAKH,MAA/B2B,EADA6H,EACA7H,QAASC,EADT4H,EACS5H,MAAOC,EADhB2H,EACgB3H,OACvB,OACEzC,EAAAC,QAAAC,cAAA,OAAK4J,MAAO,CAACe,OAAQ,4BAAuBrI,MAAOA,IAAnD,mCACExC,EAAAC,QAAAC,cAAA,OAAK4J,MAAO,CACVtH,MAAOzB,KAAK4J,gCACZlI,SACAqI,gBAAiB/J,KAAK2J,SAASnI,MAJnC,iEAsBNkI,EAAYZ,aAAe,CACzBpH,OAAQ,SAGKgI,8GC1Cf,IAAAzK,EAAAI,EAAAP,EAAA,IAEAD,EAAAQ,EAAAP,EAAA,ibAGA,SAAAiF,GAAoI,IAAhHnD,EAAgHmD,EAAhHnD,OAAQC,EAAwGkD,EAAxGlD,KAAMpB,EAAkGsE,EAAlGtE,MAAkGuK,EAAAjG,EAA3FyF,YAA2F,IAAAQ,EAApF,OAAoFA,EAAAC,EAAAlG,EAA5ErE,gBAA4E,IAAAuK,KAA1DnJ,EAA0DiD,EAA1DjD,SAAUM,EAAgD2C,EAAhD3C,YAAaF,EAAmC6C,EAAnC7C,MAAOgB,EAA4B6B,EAA5B7B,MAAO2D,EAAqB9B,EAArB8B,SAAahG,EAAQ0J,EAAAxF,EAAA,iGAClI,OACE9E,EAAAC,QAAAC,cAAA,OAAK4J,MAAO,CAACmB,aAAc,KACzBjL,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAASoB,EAAQnB,MAAOA,EAAOC,SAAUA,IAChDT,EAAAC,QAAAC,cAAA,QAAAuB,OAAAC,OAAA,CACEiH,GAAIhH,EACJ4I,KAAMA,EACN3I,KAAMA,EACNO,YAAaA,EACbF,MAAOA,EACPJ,SAAUA,EACViI,MAAO7G,GAAS,CAAC4H,OAAQ,kBACrBjK,IACHgG,EACF3D,GAASjD,EAAAC,QAAAC,cAAA,OAAK6E,UAAU,QAAQ+E,MAAO,CAACE,MAAO,QAAS/G,oLCnB/D,MAAAP,KAAA7C,EAAA,iICAA,IAAAG,EAAAI,EAAAP,EAAA,IAEAE,EAAAK,EAAAP,EAAA,IACAa,EAAAN,EAAAP,EAAA,u2BAGMqL,cACJ,SAAAA,EAAYtK,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAmK,IACjBrK,EAAAG,EAAAD,KAAAE,EAAAiK,GAAAhK,KAAAH,KAAMH,KAYRiB,SAAW,SAACC,GACV,IAAMe,EAAOhC,EAAKM,MAAM0B,KACxBA,EAAKf,EAAME,OAAOJ,MAAQE,EAAME,OAAOC,MACvCpB,EAAKkB,SAAS,CAACc,UAhBEhC,EAyCnB+B,SAAW,WAAM,IACRC,EAAQhC,EAAKM,MAAb0B,KACahC,EAAKsK,SAAStI,KAEhChC,EAAKD,MAAMgC,SAASC,GACpBhC,EAAKkB,SAAS,CAACqJ,WAAW,MA3C5BvK,EAAKM,MAAQ,CACX0B,KAAM,CACJwI,MAAO,GACPjK,SAAU,IAEZkK,OAAQ,GACRF,WAAW,GATIvK,yPADUQ,UAAMC,yDAuBnBF,GACd,OAAKA,EACDA,EAASG,QAAUR,KAAKH,MAAM2K,kBAA0B,IACjCX,SAASxJ,EAASG,OAAOR,KAAKH,MAAM2K,kBAAoB,IAAK,IAFlE,yCAMI,IAAlBF,EAAkBvG,EAAlBuG,MAAOjK,EAAW0D,EAAX1D,SACTkK,EAAS,GACRC,EAAqBxK,KAAKH,MAA1B2K,kBAOP,OALKF,IAAOC,EAAOD,MAAQ,mBACvBjK,EAASG,OAASgK,IAAmBD,EAAOlK,SAAP,6BAAA8D,OAA+CqG,EAA/C,iBAEzCxK,KAAKgB,SAAS,CAACuJ,WACmD,IAA9C7J,OAAO+J,oBAAoBF,GAAQ/J,wCAahD,IAAAkK,EACqB1K,KAAKI,MAA1BmK,EADAG,EACAH,OAAQF,EADRK,EACQL,UADRM,EAEmB3K,KAAKI,MAAM0B,KAA9BwI,EAFAK,EAEAL,MAAOjK,EAFPsK,EAEOtK,SAEd,OACEgK,EACApL,EAAAC,QAAAC,cAAA,UAAKa,KAAKH,MAAM+K,qBAChB3L,EAAAC,QAAAC,cAAA,WACEF,EAAAC,QAAAC,cAAA,YACEF,EAAAC,QAAAC,cAACH,EAAAE,QAAD,CACE0B,OAAO,0BACPC,KAAK,QACLC,SAAUd,KAAKc,SACfrB,MAAM,QACNyB,MAAOoJ,EACPpI,MAAOqI,EAAOD,MACd5K,UAAQ,IAEVT,EAAAC,QAAAC,cAACQ,EAAAT,QAAD,CACE0B,OAAO,6BACPC,KAAK,WACLK,MAAOb,EACPS,SAAUd,KAAKc,SACfQ,QAAStB,KAAK6K,gBAAgBxK,GAC9BgB,sBAAoB,EACpBiI,UAAW,GACXpH,MAAOqI,EAAOlK,WAEhBpB,EAAAC,QAAAC,cAAA,SAAOqK,KAAK,SAAStI,MAAM,WAAWkE,QAASpF,KAAK6B,kDAkB9DsI,EAAiBrB,aAAe,CAC9B8B,oBAAqB,0BACrBJ,kBAAmB,SAGNL,iLC5GfrL,EAAA,IACA,MAAAsD,KAAAtD,EAAA,mJCDA,IAAAG,EAAAI,EAAAP,EAAA,IAEAD,EAAAQ,EAAAP,EAAA,ibAGA,SAAAiF,GAAoI,IAAhHnD,EAAgHmD,EAAhHnD,OAAQC,EAAwGkD,EAAxGlD,KAAMpB,EAAkGsE,EAAlGtE,MAAkGuK,EAAAjG,EAA3FyF,YAA2F,IAAAQ,EAApF,OAAoFA,EAAAC,EAAAlG,EAA5ErE,gBAA4E,IAAAuK,KAA1DnJ,EAA0DiD,EAA1DjD,SAAUM,EAAgD2C,EAAhD3C,YAAaF,EAAmC6C,EAAnC7C,MAAOgB,EAA4B6B,EAA5B7B,MAAO2D,EAAqB9B,EAArB8B,SAAahG,EAAQ0J,EAAAxF,EAAA,iGAClI,OACE9E,EAAAC,QAAAC,cAAA,OAAK6E,UAAU,aACb/E,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAASoB,EAAQnB,MAAOA,EAAOC,SAAUA,IAChDT,EAAAC,QAAAC,cAAA,QAAAuB,OAAAC,OAAA,CACEiH,GAAIhH,EACJ4I,KAAMA,EACN3I,KAAMA,EACNO,YAAaA,EACbF,MAAOA,EACPJ,SAAUA,EACVkD,UAAW9B,GAAS,iCAChBrC,IACHgG,EACF3D,GAASjD,EAAAC,QAAAC,cAAA,OAAK6E,UAAU,oBAAoB9B,oLCnBnD,MAAAG,KAAAvD,EAAA,iICAA,IAAAG,EAAAI,EAAAP,EAAA,IAEAD,EAAAQ,EAAAP,EAAA,IACAgM,EAAAzL,EAAAP,EAAA,kbAGA,SAAAiF,GAAoI,IAAhHnD,EAAgHmD,EAAhHnD,OAAQC,EAAwGkD,EAAxGlD,KAAMpB,EAAkGsE,EAAlGtE,MAAkGuK,EAAAjG,EAA3FyF,YAA2F,IAAAQ,EAApF,OAAoFA,EAAAC,EAAAlG,EAA5ErE,gBAA4E,IAAAuK,KAA1DnJ,EAA0DiD,EAA1DjD,SAAUM,EAAgD2C,EAAhD3C,YAAaF,EAAmC6C,EAAnC7C,MAAOgB,EAA4B6B,EAA5B7B,MAAO2D,EAAqB9B,EAArB8B,SAAahG,EAAQ0J,EAAAxF,EAAA,iGAClI,OACE9E,EAAAC,QAAAC,cAAA,OAAK6E,UAAW+G,UAAOC,UACrB/L,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAASoB,EAAQnB,MAAOA,EAAOC,SAAUA,IAChDT,EAAAC,QAAAC,cAAA,QAAAuB,OAAAC,OAAA,CACEiH,GAAIhH,EACJ4I,KAAMA,EACN3I,KAAMA,EACNO,YAAaA,EACbF,MAAOA,EACPJ,SAAUA,EACVkD,UAAW9B,GAAS6I,UAAOE,YACvBpL,IACHgG,EACF3D,GAASjD,EAAAC,QAAAC,cAAA,OAAK6E,UAAW+G,UAAO7I,OAAQA,sMCpB/C,MAAAI,KAAAxD,EAAA,iICAA,IAAAG,EAAAI,EAAAP,EAAA,IAEAD,EAAAQ,EAAAP,EAAA,IACAoM,EAAA7L,EAAAP,EAAA,uzBAGA,SAAAiF,GAAoI,IAAhHnD,EAAgHmD,EAAhHnD,OAAQC,EAAwGkD,EAAxGlD,KAAMpB,EAAkGsE,EAAlGtE,MAAkGuK,EAAAjG,EAA3FyF,YAA2F,IAAAQ,EAApF,OAAoFA,EAAAC,EAAAlG,EAA5ErE,gBAA4E,IAAAuK,KAA1DnJ,EAA0DiD,EAA1DjD,SAAUM,EAAgD2C,EAAhD3C,YAAaF,EAAmC6C,EAAnC7C,MAAOgB,EAA4B6B,EAA5B7B,MAAO2D,EAAqB9B,EAArB8B,SAAahG,EAAQ0J,EAAAxF,EAAA,iGAC5HiE,EAAQmD,UAAOC,IAAVC,KAILC,EAAQH,UAAOI,MAAVC,IACCtJ,GAAS,qBAIfuJ,EAAWN,UAAOC,IAAVM,KAId,OACEzM,EAAAC,QAAAC,cAACsM,EAAD,KACExM,EAAAC,QAAAC,cAACN,EAAAK,QAAD,CAAOM,QAASoB,EAAQnB,MAAOA,EAAOC,SAAUA,IAChDT,EAAAC,QAAAC,cAACmM,EAAD5K,OAAAC,OAAA,CACEiH,GAAIhH,EACJ4I,KAAMA,EACN3I,KAAMA,EACNO,YAAaA,EACbF,MAAOA,EACPJ,SAAUA,GACNjB,IACHgG,EACF3D,GAASjD,EAAAC,QAAAC,cAAC6I,EAAD,KAAQ9F,kHChCxB,MAAAjD,KAAAH,EAAA,gCAGA,MAAc,SAAAiF,GAAa,IAAXlE,EAAWkE,EAAXlE,MACd,OACEZ,EAAAC,QAAAC,cAAA,SAAO6E,UAAU,SACf/E,EAAAC,QAAAC,cAAA,aACEF,EAAAC,QAAAC,cAAA,UACEF,EAAAC,QAAAC,cAAA,kBACAF,EAAAC,QAAAC,cAAA,yBACAF,EAAAC,QAAAC,cAAA,kBACAF,EAAAC,QAAAC,cAAA,qBACAF,EAAAC,QAAAC,cAAA,wBAGJF,EAAAC,QAAAC,cAAA,aAEEuB,OAAOuH,KAAKpI,GAAOiE,IAAI,SAAAG,GACrB,OACEhF,EAAAC,QAAAC,cAAA,MAAI8E,IAAKA,GACPhF,EAAAC,QAAAC,cAAA,UAAK8E,GACLhF,EAAAC,QAAAC,cAAA,UAAKU,EAAMoE,GAAKK,aAChBrF,EAAAC,QAAAC,cAAA,UAAKU,EAAMoE,GAAKuF,KAAK3I,MACrB5B,EAAAC,QAAAC,cAAA,UAAKU,EAAMoE,GAAK0H,cAAgB9L,EAAMoE,GAAK0H,aAAazK,OACxDjC,EAAAC,QAAAC,cAAA,UAAKU,EAAMoE,GAAKvE,UAAY,sCCxB1CyI,EAAAC,QAAA,EACAvH,KAAA,UACAyD,YAAA,eACAW,KAAA,4yBACAV,SAAA,EACA1D,KAAA,iBACAyD,YAAA,GACAW,KAAA,wJAEC,CACDpE,KAAA,aACAyD,YAAA,gEACAzE,MAAA,CACAN,QAAA,CACAiK,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qBACAqH,aAAA,CACAzK,MAAA,UACA0K,UAAA,KAIA3G,KAAA,qYACAV,SAAA,EACA1D,KAAA,oBACAyD,YAAA,iBACAW,KAAA,4NAEC,CACDpE,KAAA,QACAyD,YAAA,gEACAzE,MAAA,CACAL,QAAA,CACAgK,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,gCAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,cAEA5E,SAAA,CACA8J,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,yCAGAW,KAAA,2mBACAV,SAAA,EACA1D,KAAA,kBACAyD,YAAA,iBACAW,KAAA,uMACG,CACHpE,KAAA,kBACAyD,YAAA,iBACAW,KAAA,kNAEC,CACDpE,KAAA,gBACAyD,YAAA,gFACAzE,MAAA,CACAe,OAAA,CACA4I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEAzD,KAAA,CACA2I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,uHAEApD,MAAA,CACAsI,KAAA,CACA3I,KAAA,OAEAnB,UAAA,EACA4E,YAAA,kBAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,cACAqH,aAAA,CACAzK,MAAA,aACA0K,UAAA,IAGA9K,SAAA,CACA0I,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,qDAEAgF,UAAA,CACAE,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,+BACAqH,aAAA,CACAzK,MAAA,KACA0K,UAAA,IAGAxK,YAAA,CACAoI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qDAEAjD,qBAAA,CACAmI,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,+EACAqH,aAAA,CACAzK,MAAA,QACA0K,UAAA,IAGAtK,QAAA,CACAkI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEApC,MAAA,CACAsH,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,gCAGAW,KAAA,gmFACAV,SAAA,EACA1D,KAAA,qBACAyD,YAAA,uBACAW,KAAA,m4BAEC,CACDpE,KAAA,cACAyD,YAAA,GACAzE,MAAA,CACA2B,QAAA,CACAgI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,iCAEA7C,MAAA,CACA+H,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,aAEA5C,OAAA,CACA8H,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,aACAqH,aAAA,CACAzK,MAAA,IACA0K,UAAA,KAIA3G,KAAA,y3CACAV,SAAA,EACA1D,KAAA,oBACAyD,YAAA,gCACAW,KAAA,gPACG,CACHpE,KAAA,mBACAyD,YAAA,eACAW,KAAA,iNACG,CACHpE,KAAA,mBACAyD,YAAA,eACAW,KAAA,mNAEC,CACDpE,KAAA,mBACAyD,YAAA,8CACAzE,MAAA,CACA+K,oBAAA,CACApB,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,+CACAqH,aAAA,CACAzK,MAAA,4BACA0K,UAAA,IAGA/J,SAAA,CACA2H,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,iCAEAkG,kBAAA,CACAhB,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,0BACAqH,aAAA,CACAzK,MAAA,IACA0K,UAAA,KAIA3G,KAAA,qhGACAV,SAAA,EACA1D,KAAA,0BACAyD,YAAA,GACAW,KAAA,qTAEC,CACDpE,KAAA,YACAyD,YAAA,gIACAzE,MAAA,CACAe,OAAA,CACA4I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEAzD,KAAA,CACA2I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yGAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,eAEAkF,KAAA,CACAA,KAAA,CACA3I,KAAA,OACAK,MAAA,EACAA,MAAA,SACA0K,UAAA,GACS,CACT1K,MAAA,WACA0K,UAAA,GACS,CACT1K,MAAA,aACA0K,UAAA,KAGAlM,UAAA,EACA4E,YAAA,aACAqH,aAAA,CACAzK,MAAA,SACA0K,UAAA,IAGAlM,SAAA,CACA8J,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,0CACAqH,aAAA,CACAzK,MAAA,QACA0K,UAAA,IAGA9K,SAAA,CACA0I,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,6BAEAlD,YAAA,CACAoI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qCAEApD,MAAA,CACAsI,KAAA,CACA3I,KAAA,OAEAnB,UAAA,EACA4E,YAAA,SAEApC,MAAA,CACAsH,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,uCAEAuB,SAAA,CACA2D,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,iDAGAW,KAAA,yvDACAV,SAAA,EACA1D,KAAA,eACAyD,YAAA,8BACAW,KAAA,odACG,CACHpE,KAAA,kBACAyD,YAAA,mBACAW,KAAA,mZAEC,CACDpE,KAAA,eACAyD,YAAA,gIACAzE,MAAA,CACAe,OAAA,CACA4I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEAzD,KAAA,CACA2I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yGAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,eAEAkF,KAAA,CACAA,KAAA,CACA3I,KAAA,OACAK,MAAA,EACAA,MAAA,SACA0K,UAAA,GACS,CACT1K,MAAA,WACA0K,UAAA,GACS,CACT1K,MAAA,aACA0K,UAAA,KAGAlM,UAAA,EACA4E,YAAA,aACAqH,aAAA,CACAzK,MAAA,SACA0K,UAAA,IAGAlM,SAAA,CACA8J,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,0CACAqH,aAAA,CACAzK,MAAA,QACA0K,UAAA,IAGA9K,SAAA,CACA0I,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,6BAEAlD,YAAA,CACAoI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qCAEApD,MAAA,CACAsI,KAAA,CACA3I,KAAA,OAEAnB,UAAA,EACA4E,YAAA,SAEApC,MAAA,CACAsH,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,uCAEAuB,SAAA,CACA2D,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,iDAGAW,KAAA,ovDACAV,SAAA,EACA1D,KAAA,eACAyD,YAAA,8BACAW,KAAA,6bAEC,CACDpE,KAAA,sBACAyD,YAAA,gIACAzE,MAAA,CACAe,OAAA,CACA4I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEAzD,KAAA,CACA2I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yGAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,eAEAkF,KAAA,CACAA,KAAA,CACA3I,KAAA,OACAK,MAAA,EACAA,MAAA,SACA0K,UAAA,GACS,CACT1K,MAAA,WACA0K,UAAA,GACS,CACT1K,MAAA,aACA0K,UAAA,KAGAlM,UAAA,EACA4E,YAAA,aACAqH,aAAA,CACAzK,MAAA,SACA0K,UAAA,IAGAlM,SAAA,CACA8J,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,0CACAqH,aAAA,CACAzK,MAAA,QACA0K,UAAA,IAGA9K,SAAA,CACA0I,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,6BAEAlD,YAAA,CACAoI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qCAEApD,MAAA,CACAsI,KAAA,CACA3I,KAAA,OAEAnB,UAAA,EACA4E,YAAA,SAEApC,MAAA,CACAsH,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,uCAEAuB,SAAA,CACA2D,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,iDAGAW,KAAA,2wDACAV,SAAA,EACA1D,KAAA,eACAyD,YAAA,8BACAW,KAAA,kdAEC,CACDpE,KAAA,4BACAyD,YAAA,gIACAzE,MAAA,CACAe,OAAA,CACA4I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yFAEAzD,KAAA,CACA2I,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,yGAEA7E,MAAA,CACA+J,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,eAEAkF,KAAA,CACAA,KAAA,CACA3I,KAAA,OACAK,MAAA,EACAA,MAAA,SACA0K,UAAA,GACS,CACT1K,MAAA,WACA0K,UAAA,GACS,CACT1K,MAAA,aACA0K,UAAA,KAGAlM,UAAA,EACA4E,YAAA,aACAqH,aAAA,CACAzK,MAAA,SACA0K,UAAA,IAGAlM,SAAA,CACA8J,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,0CACAqH,aAAA,CACAzK,MAAA,QACA0K,UAAA,IAGA9K,SAAA,CACA0I,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,6BAEAlD,YAAA,CACAoI,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,qCAEApD,MAAA,CACAsI,KAAA,CACA3I,KAAA,OAEAnB,UAAA,EACA4E,YAAA,SAEApC,MAAA,CACAsH,KAAA,CACA3I,KAAA,UAEAnB,UAAA,EACA4E,YAAA,uCAEAuB,SAAA,CACA2D,KAAA,CACA3I,KAAA,QAEAnB,UAAA,EACA4E,YAAA,iDAGAW,KAAA,45DACAV,SAAA,EACA1D,KAAA,eACAyD,YAAA,8BACAW,KAAA,klBC5mBO,SAAkB4G,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,IAAMC,EAAY,IAAIC,IAAIC,iBAAwB5I,OAAOC,SAASY,MAClE,GAAI6H,EAAUG,SAAW7I,OAAOC,SAAS4I,OAIvC,OAGF7I,OAAOI,iBAAiB,OAAQ,WAC9B,IAAM0I,EAAK,GAAAhI,OAAM8H,iBAAN,sBAEPG,IAgEV,SAAiCD,EAAON,GAEtCQ,MAAMF,GACHG,KAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cd,UAAUrJ,cAAcoK,MAAMP,KAAK,SAAAQ,GACjCA,EAAa/J,aAAauJ,KAAK,WAC7BjJ,OAAOC,SAASyJ,aAKpBC,EAAgBb,EAAON,KAG1BoB,MAAM,WACLlL,QAAQC,IACN,mEArFAkL,CAAwBf,EAAON,GAI/BC,UAAUrJ,cAAcoK,MAAMP,KAAK,WACjCvK,QAAQC,IACN,gHAMJgL,EAAgBb,EAAON,oBA8ExB,WACD,kBAAmBC,WACrBA,UAAUrJ,cAAcoK,MAAMP,KAAK,SAAAQ,GACjCA,EAAa/J,gBAvHnB,IAAMqJ,EAAce,QACW,cAA7B9J,OAAOC,SAAS8J,UAEe,UAA7B/J,OAAOC,SAAS8J,UAEhB/J,OAAOC,SAAS8J,SAASC,MACvB,2DAsCN,SAASL,EAAgBb,EAAON,GAC9BC,UAAUrJ,cACP6K,SAASnB,GACTG,KAAK,SAAAQ,GACJA,EAAaS,cAAgB,WAC3B,IAAMC,EAAmBV,EAAaW,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpN,QACf0L,UAAUrJ,cAAckL,YAI1B5L,QAAQC,IACN,iHAKE6J,GAAUA,EAAO+B,UACnB/B,EAAO+B,SAASd,KAMlB/K,QAAQC,IAAI,sCAGR6J,GAAUA,EAAOgC,WACnBhC,EAAOgC,UAAUf,UAO5BG,MAAM,SAAA/K,GACLH,QAAQG,MAAM,4CAA6CA","file":"static/js/main.13a3165b.chunk.js","sourcesContent":["export {default} from './Label';\n","export {default} from './ProgressBar.js';\n","export {default} from './TextInput';\n","import React from 'react';\nimport EyeIcon from 'loot-react-lm/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","export {default} from './EyeIcon';\n","import React from 'react';\nimport HelloWorld from 'loot-react-lm/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message = \"Loot Crate viewers!\" />\n}\n","import React from 'react';\nimport Label from 'loot-react-lm/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'loot-react-lm/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n","import React from 'react';\nimport PasswordInput from 'loot-react-lm/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n","export {default} from './PasswordInput';\n","import React from 'react';\nimport ProgressBar from 'loot-react-lm/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={500} height={20} />\n}\n","import React from 'react';\nimport ProgressBar from 'loot-react-lm/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={500} />\n}\n","import React from 'react';\nimport ProgressBar from 'loot-react-lm/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={500} />\n}\n","import React from 'react';\nimport RegistrationForm from 'loot-react-lm/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n","import React from 'react';\nimport TextInput from 'loot-react-lm/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        placeholder=\"First Name\"\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'loot-react-lm/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        placeholder=\"First Name\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInputBEM from 'loot-react-lm/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInputCSSModules from 'loot-react-lm/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInputStyledComponents from 'loot-react-lm/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport './index.css';\nimport '../node_modules/highlight.js/styles/ocean.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Docs />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({route: window.location.hash.substr(1)})\n    })\n  }\n\n  render() {\n    const {route} = this.state;\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map( example => <Example key={example.name} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode};\n    });\n  }\n\n  render() {\n    const {showCode} = this.state;\n    const {code, description, name} = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4> }\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"bar\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 5,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 5,\n\t\"./HelloWorld/ExampleHelloWorld\": 7,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 7,\n\t\"./Label/ExampleOptional\": 8,\n\t\"./Label/ExampleOptional.js\": 8,\n\t\"./Label/ExampleRequired\": 9,\n\t\"./Label/ExampleRequired.js\": 9,\n\t\"./PasswordInput/ExampleAllFeatures\": 10,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 10,\n\t\"./ProgressBar/Example100Percent\": 12,\n\t\"./ProgressBar/Example100Percent.js\": 12,\n\t\"./ProgressBar/Example10Percent\": 13,\n\t\"./ProgressBar/Example10Percent.js\": 13,\n\t\"./ProgressBar/Example70Percent\": 14,\n\t\"./ProgressBar/Example70Percent.js\": 14,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 15,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 15,\n\t\"./TextInput/ExampleError\": 16,\n\t\"./TextInput/ExampleError.js\": 16,\n\t\"./TextInput/ExampleOptional\": 17,\n\t\"./TextInput/ExampleOptional.js\": 17,\n\t\"./TextInputBEM/ExampleError\": 18,\n\t\"./TextInputBEM/ExampleError.js\": 18,\n\t\"./TextInputCSSModules/ExampleError\": 19,\n\t\"./TextInputCSSModules/ExampleError.js\": 19,\n\t\"./TextInputStyledComponents/ExampleError\": 20,\n\t\"./TextInputStyledComponents/ExampleError.js\": 20\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 36;","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","export {default} from './HelloWorld';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A super lame component that says Hello with a custom message. */\nfunction HelloWorld({message}) {\n  return <div>Hello {message}</div>\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"foo\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './RegistrationForm';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <form>\n          <TextInput\n            htmlId=\"registration-form-email\"\n            name=\"email\"\n            onChange={this.onChange}\n            label=\"Email\"\n            value={email}\n            error={errors.email}\n            required />\n\n          <PasswordInput\n            htmlId=\"registration-form-password\"\n            name=\"password\"\n            value={password}\n            onChange={this.onChange}\n            quality={this.passwordQuality(password)}\n            showVisibilityToggle\n            maxLength={50}\n            error={errors.password} />\n\n          <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n        </form>\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import './textInput.css';\nexport {default} from './TextInputBEM';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './TextInputCSSModules';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './TextInputStyledComponents';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: #e45353;\n  `;\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px #e45353'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })\n      }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleEyeIcon\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'loot-react-lm/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"'World'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** A super lame component that says Hello with a custom message. */\\nfunction HelloWorld({message}) {\\n  return <div>Hello {message}</div>\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: 'World'\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from 'loot-react-lm/HelloWorld';\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message = \\\"Loot Crate viewers!\\\" />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'loot-react-lm/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'loot-react-lm/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"foo\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'loot-react-lm/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'loot-react-lm/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={500} height={20} />\\n}\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'loot-react-lm/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={500} />\\n}\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'loot-react-lm/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={500} />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <form>\\n          <TextInput\\n            htmlId=\\\"registration-form-email\\\"\\n            name=\\\"email\\\"\\n            onChange={this.onChange}\\n            label=\\\"Email\\\"\\n            value={email}\\n            error={errors.email}\\n            required />\\n\\n          <PasswordInput\\n            htmlId=\\\"registration-form-password\\\"\\n            name=\\\"password\\\"\\n            value={password}\\n            onChange={this.onChange}\\n            quality={this.passwordQuality(password)}\\n            showVisibilityToggle\\n            maxLength={50}\\n            error={errors.password} />\\n\\n          <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n        </form>\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'loot-react-lm/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'loot-react-lm/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        placeholder=\\\"First Name\\\"\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'loot-react-lm/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        placeholder=\\\"First Name\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && 'textinput__input--state-error'}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'loot-react-lm/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'loot-react-lm/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: #e45353;\\n  `;\\n\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px #e45353'};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}/>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputStyledComponents from 'loot-react-lm/TextInputStyledComponents';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}];","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}